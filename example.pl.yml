# Pleasy uses the config here to work.
# Some variables are set from the context, eg the project name comes from the root folder name chosen at install.
# Database root user is in a separate file that is created when pl init is run. It is called mysql.cnf
# Drush aliases will also be automatically created when a site is installed. The alias is: @site
# Drupal console aliases are also created: @site.
#
# There are some global variables set
#  hosts_path: The hosts path
#  localserver: apache or nginx. This will set up the webserver on the users computer. A lando setup can use an independent server.
#  vhosts_path: The apache sites available
#  user: The current user (carlos is in honour of venerable Carlos Acutis)
#  project: The project name will be worked out from the parent folder.
#  github:
#    user: Your github user name
#    key:  Your github key
#    email: The email you use for github. This is to provide your identity credentials when setting up git.
#  prod:
#    alias: The drush alias for your production server. Pleasy will set this alias up for you.
#    uri: Your production server URL
#    user: The production server user name
#    docroot: Full path on the production server to your drupal webroot
#
hosts_path: "/etc/hosts"
localserver: nginx
vhosts_path: "/etc/apache2/sites-available/"
www_path: "/var/www/oc"
user: rob
github:
  user: carlos
  key:  github
  email: carlos@example.com
prod:
  alias: cathnet
  uri: "opencat.org"
  user: puregift
  docroot: "/var/www/opencat.org/docroot"
  method: tar  # Method could be git or tar.
#
# Since you can create many different sites, each in its own folder. There are certain commands that work with dev, stg and localprod
# So these need to be specified. Therefore you can change them as you like.
# dev(development site) is where you will do most of your development work. Its set to 'loc' for local since drupal console automatically sets up
# a uri which as the site name last. If dev were used, google owns .dev and would not show it properly so loc is used instead. Unless you want to set up local ssl cert.
# localprod will be a copy of the current production website as is. This will save time if you need to test stg multiple times.
# stg is usually created from localprod files with the new files from loc and the localprod database ready to test the changes.
#
sites:
  dev:  loc
  stg:  stg
  localprod:  localprod
#
# RECIPES
# Recipes are the recipes for each site. The default is used for every site unless overwritten.
# There are some defaults which are not specified here such as database names.
# If no database information is given the following is used
# db: will be "siteproject" ie site name project name (root folder name), eg locpleasy
# dbuser: will be db
# dbpass: will be dbuser
#
# Just specifying a new site name is enough.ran
#
# The following settings are possible
# source: is the root folder by default opencourse-project. It will be used as the right most part of the URL. I suggest you build into oc instead.
# dev: Should this site have dev modules and settings installed.
# webroot: is the uppermost webroot folder, default is: docroot. Since this system can be used for other drupal distros, it could be web or html
# sitename: if not given, the sitename will be the name of the site. This is only used as part of the install process for the site header.
# auto: all prompts are given a yes by default
# apache: Is it an apache site. default is yes. ### Not sure if this is being used....
# profile: Which drupal profile to install. Normally it would be standard with drupal 8, varbase with varbase.
# uri: You can set the uri otherwise it is project.site, eg pleasy.loc
# install_method: git/composer/file. All three work.
# git_upstream: is used if the project is forked. Pleasy can update to upstream.
# theme: which theme to install
# theme_admin: which admin theme to install
# install_modules: which modules to install
# dev_modules: which dev modules to install for dev (or uninstall if making production)
#
recipes:
  default:
    source:  git@github.com:rjzaar/opencourse.git
    dev:  y
    profile: varbase
    webroot:  docroot
    #    sitename: default # leave blank it will be called the name of the site, eg loc
    auto:  y
    server: nginx
    install_method: git
    git_upstream: git@github.com:Vardot/varbase-project.git
    theme: octheme_bs4
    theme_admin: octheme_admin
    install_modules: oc_prod
    dev_modules: oc_dev syslog views_ui block_place devel features_ui dblog search_kint twig_xdebug
    lando: n
  loc:
  stg:
  locl:
    lando: y
  localprod:
    dev:  n
  ins:
    install_modules: oc_prod oc_content
  bak:
  d9:
    source: https://www.drupal.org/download-latest/tar.gz
    install_method: file
    profile: standard
    webroot: docroot
    default: n
    auto: y
    server: nginx
  d8:
    source: https://ftp.drupal.org/files/projects/drupal-8.9.0.tar.gz
    install_method: file
    profile: standard
    webroot: docroot
    default: n
    auto: y
    server: nginx
  d8c:
    source: drupal/recommended-project
    install_method: composer
    profile: standard
    webroot: web
    default: n
    auto: y
    server: nginx
  tes:
  varg:
    source: git@github.com:Vardot/varbase-project.git
    install_method: git
    theme: vartheme_bs4
    theme_admin: vartheme_admin
    install_modules:
    dev_modules: syslog views_ui block_place devel features_ui dblog
    # This is a special directive that will not load any defaults from the default recipe.
    # This is so in this case install_modules will remain blank
    default: n
  var:
    source: vardot/varbase-project:^8.8.5
    install_method: composer
    theme: vartheme_bs4
    theme_admin: vartheme_admin
    install_modules:
    dev_modules: syslog views_ui block_place devel features_ui dblog
    default: n
  vard:
    source: vardot/varbase-project:8.8.x-dev
    install_method: composer
    dev: y
    theme: vartheme_bs4
    theme_admin: vartheme_admin
    install_modules:
    dev_modules: syslog views_ui block_place devel features_ui dblog
    default: n